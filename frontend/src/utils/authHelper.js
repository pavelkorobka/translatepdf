import api from "../api";

export const getAccessToken = () => localStorage.getItem("access_token");
export const getRefreshToken = () => localStorage.getItem("refresh_token");

export const setTokens = (access, refresh) => {
  console.log("üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token:", access);
  console.log("üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh_token:", refresh);
  localStorage.setItem("access_token", access);
  localStorage.setItem("refresh_token", refresh);
};

export const clearTokens = () => {
  console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω.");
  localStorage.removeItem("access_token");
  localStorage.removeItem("refresh_token");
};

export const refreshAccessToken = async () => {
  try {
    const refreshToken = getRefreshToken();
    if (!refreshToken) {
      console.error("‚ùå –û—à–∏–±–∫–∞: Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
      throw new Error("Refresh token not found");
    }

    console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º access_token...");
    //const response = await api.post("/auth/refresh", { refresh_token: refreshToken });
    const response = await api.post(`/auth/refresh?refresh_token=${encodeURIComponent(refreshToken)}`);

    if (!response.data.access_token) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π access_token.");
      throw new Error("No access_token received");
    }

    setTokens(response.data.access_token, refreshToken);
    console.log("‚úÖ –ù–æ–≤—ã–π access_token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
    return response.data.access_token;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token:", error.response?.data || error.message);
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 403, –∑–Ω–∞—á–∏—Ç refresh_token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚Üí —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (error.response?.status === 403) {
      console.warn("‚ö†Ô∏è Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      clearTokens();
      alert("refresh");
      window.location.href = "/";
    }

    return null;
  }
};

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401 –æ—à–∏–±–∫–µ
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 401. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...");
      const newToken = await refreshAccessToken();
      
      if (newToken) {
        console.log("üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º access_token.");
        error.config.headers.Authorization = `Bearer ${newToken}`;
        return api.request(error.config);
      }
    }
    
    return Promise.reject(error);
  }
);